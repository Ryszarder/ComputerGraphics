#version 450

out vec4 FragColour;

in vec3 _colour;
//in vec3 _worldNormals;
in vec2 _texCoord;
in mat3 _TBNmat;
in vec3 _fragPos;

uniform vec3 dirLightPos;
uniform vec3 pointLightPos;
uniform vec3 viewPos;
uniform vec3 redColour;
uniform vec3 blueColour;
uniform mat4 modelMatrix;
uniform sampler2D diffTexture;
uniform sampler2D normTexture;
uniform sampler2D specTexture;

vec3 dirLight(vec3 dirLightPos, vec3 normal, vec3 viewDir);
vec3 pointLight(vec3 pointLightPos, vec3 normal, vec3 viewDir);

void main()
{
	vec3 tangentSpaceNormals = texture(normTexture, _texCoord).xyz * 2 - 1;
	vec3 objectSpaceNormals = _TBNmat * tangentSpaceNormals;
	vec3 worldSpaceNormals = (modelMatrix * vec4(objectSpaceNormals, 0.0)).xyz;
	
	//vec3 viewDir = normalize(_fragPos - viewPos);
	vec3 viewDir = normalize(viewPos - _fragPos);
	
	vec3 result = dirLight(dirLightPos, worldSpaceNormals, viewDir);
	
	result += pointLight(pointLightPos, worldSpaceNormals, viewDir);
	
	FragColour = vec4(result, 1);	
}

vec3 dirLight(vec3 dirLightPos, vec3 normal, vec3 viewDir)
{
	vec3 diffuseColour = texture(diffTexture, _texCoord).rgb;
	vec3 specularColour = texture(specTexture, _texCoord).rgb;

	//Ambient
	float ambientStrength = 0.05f;
	vec3 ambient = ambientStrength * diffuseColour;
	
	//Diffuse
	vec3 lightDir = normalize(-dirLightPos);
	float lightVaule = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = lightVaule * diffuseColour * redColour;
	
	//Specular
	vec3 reflectDir = reflect(lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = spec * specularColour;

	return(ambient + diffuse + specular);
}


vec3 pointLight(vec3 pointLightPos, vec3 normal, vec3 viewDir)
{
	vec3 diffuseColour = texture(diffTexture, _texCoord).rgb;
	vec3 specularColour = texture(specTexture, _texCoord).rgb;

	//Ambient
	float ambientStrength = 0.05f;
	vec3 ambient = ambientStrength * diffuseColour;
	
	//Diffuse
	vec3 lightDir = normalize(pointLightPos - _fragPos);
	float lightVaule = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = lightVaule * diffuseColour * blueColour;
	
	//Specular
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = spec * specularColour;	
	
	float distance = length(pointLightPos - _fragPos);
	float attenuation = 1.0 / (1.0f + 0.09f * distance + 0.032f * (distance * distance));
	
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	
	return(ambient + diffuse + specular);
}




	
	//Directional Light
	//vec3 objectSpaceNormals = _TBNmat * tangentSpaceNormals;
	//vec3 worldSpaceNormals = (modelMatrix * vec4(objectSpaceNormals, 0.0)).xyz;
	//vec3 lightDir = normalize(-lightPos);
	//float lightVaule = max(dot(worldSpaceNormals, lightDir), 0.0);
	//vec3 diffuse = lightVaule * diffuseColour;
	
	//Point Light
	//float distance = length(lightPos - _fragPos);
	//float attenuation = 1.0 / (1.0f + 0.09f * distance + 0.032f * (distance * distance));
	//ambient *= attenuation;
	//diffuse *= attenuation;
	//specular *= attenuation;
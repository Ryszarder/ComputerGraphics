#version 450

out vec4 FragColour;

in vec3 _colour;
//in vec3 _worldNormals;
in vec2 _texCoord;
in mat3 _TBNmat;

uniform vec3 fromLight;
uniform mat4 modelMatrix;
uniform sampler2D diffTexture;
uniform sampler2D normTexture;
uniform sampler2D specTexture;

void main()
{
	vec3 diffuseColour = texture(diffTexture, _texCoord).rgb;
	vec3 tangentSpaceNormals = texture(normTexture, _texCoord).xyz * 2 - 1;
	vec3 specularColour = texture(specTexture, _texCoord).rgb;

	//Lighting calculations go here
	vec3 ambient = _colour * diffuseColour;
	
	vec3 objectSpaceNormals = _TBNmat * tangentSpaceNormals;
	vec3 worldSpaceNormals = (modelMatrix * vec4(objectSpaceNormals, 0.0)).xyz;
	float lightVaule = max(dot(worldSpaceNormals, fromLight), 0.0);
	vec3 diffuse = lightVaule * diffuseColour;
	
	FragColour = vec4(ambient + diffuse + specularColour, 1);
}
	//FragColour = vec4(_colour * diffuse, 1);	
	//FragColour = vec4(_colour * lightVaule, 1.0);
	//FragColour = vec4(_texCoord, 0, 1);